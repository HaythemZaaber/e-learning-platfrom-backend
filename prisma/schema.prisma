// Enhanced E-Learning Platform Prisma Schema
// Comprehensive AI-powered learning management system with advanced features

generator client {
  provider = "prisma-client-js"
}

/// @seed="ts-node prisma/seed.ts"

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  clerkId      String    @unique
  email        String    @unique
  username     String?
  firstName    String?
  lastName     String?
  profileImage String?
  bio          String?
  phone        String?
  address      String?
  city         String?
  state        String?
  zip          String?
  country      String?
  dateOfBirth  DateTime?
  gender       Gender?

  // Enhanced user profile
  timezone String? @default("UTC")
  locale   String? @default("en")

  // Role Management
  role            UserRole @default(VISITOR)
  title           String?
  isEmailVerified Boolean  @default(false)
  isPhoneVerified Boolean  @default(false)

  // Instructor-specific fields
  instructorStatus InstructorStatus @default(NOT_APPLIED)
  instructorBio    String?
  expertise        String[]         @default([])
  qualifications   String[]         @default([])
  experience       Int? // years of experience
  socialLinks      Json             @default("{}")
  teachingRating   Float?           @default(0)
  totalStudents    Int?             @default(0)
  totalCourses     Int?             @default(0)

  // Learning preferences & analytics
  learningStyle      LearningStyle?
  preferredLanguages String[]       @default([])
  skillTags          String[]       @default([])

  // Platform engagement
  lastLoginAt DateTime?
  isActive    Boolean   @default(true)
  preferences Json      @default("{}")
  rating      Float?    @default(0)

  // Gamification
  totalPoints   Int      @default(0)
  currentStreak Int      @default(0)
  longestStreak Int      @default(0)
  achievements  String[] @default([])

  // Analytics fields
  totalTimeSpent        Int       @default(0) // in minutes
  totalCoursesEnrolled  Int       @default(0)
  totalCoursesCompleted Int       @default(0)
  averageCompletionRate Float     @default(0)
  lastActivityAt        DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  instructorCourses     Course[]               @relation("InstructorCourses")
  enrollments           Enrollment[]
  progress              Progress[]
  reviews               Review[]
  instructorApplication InstructorApplication?
  aiInteractions        AIInteraction[]
  certificates          Certificate[]
  discussions           Discussion[]
  notifications         Notification[]
  courseDrafts          CourseDraft[]
  learningPaths         UserLearningPath[]
  courseBookmarks       CourseBookmark[]
  lectureNotes          LectureNote[]
  quizAttempts          QuizAttempt[]
  assignments           AssignmentSubmission[]
  lectureRatings        LectureRating[]
  lectureIssues         LectureIssue[]
  lectureAccessRequests LectureAccessRequest[]
  paymentSessions       PaymentSession[]
  paymentMethods        PaymentMethod[]

  @@map("users")
}

model CourseDraft {
  id           String @id @default(cuid())
  instructorId String
  instructor   User   @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  // Draft data with version control
  draftData       Json @default("{}")
  currentStep     Int  @default(0)
  completionScore Int  @default(0)
  version         Int  @default(1)

  // Auto-save tracking
  lastAutoSave DateTime?
  saveCount    Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("course_drafts")
}

model InstructorApplication {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Application Details
  motivation         String
  teachingExperience String
  portfolioUrl       String?
  resumeUrl          String?
  identityDocument   String?
  qualificationDocs  String[] @default([])
  sampleContent      String? // URL to sample teaching content

  // Enhanced review process
  status      ApplicationStatus @default(PENDING)
  reviewedBy  String?
  reviewNotes String?
  reviewScore Int? // 1-10 rating
  reviewedAt  DateTime?

  // Interview process
  interviewScheduled DateTime?
  interviewNotes     String?
  interviewScore     Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("instructor_applications")
}

model Course {
  id               String      @id @default(cuid())
  title            String
  description      String
  shortDescription String?
  category         String
  subcategory      String?
  level            CourseLevel @default(BEGINNER)

  // Enhanced media
  thumbnail     String?
  trailer       String? // Course preview video
  galleryImages String[] @default([]) // Additional course images

  // Pricing & Monetization
  price              Float     @default(0)
  originalPrice      Float?
  currency           String    @default("USD")
  discountPercent    Float?    @default(0)
  discountValidUntil DateTime?

  // Course Content Structure
  objectives    String[] @default([])
  prerequisites String[] @default([])
  whatYouLearn  String[] @default([])
  requirements  String[] @default([]) // Technical requirements

  // Enhanced SEO & Marketing
  seoTitle       String?
  seoDescription String?
  seoTags        String[] @default([])
  marketingTags  String[] @default([])
  targetAudience String[] @default([])

  // Course Settings & Features
  status            CourseStatus   @default(DRAFT)
  enrollmentType    EnrollmentType @default(FREE)
  language          String         @default("en")
  subtitleLanguages String[]       @default([])
  isPublic          Boolean        @default(true)
  isFeatured        Boolean        @default(false)
  isBestseller      Boolean        @default(false)
  isTrending        Boolean        @default(false)
  isNew             Boolean        @default(false)

  // Certificates & Completion
  certificate         Boolean @default(false)
  certificateTemplate String?
  passingGrade        Float   @default(70)
  allowRetakes        Boolean @default(true)
  maxAttempts         Int?

  // Duration & Difficulty
  estimatedHours   Int             @default(0)
  estimatedMinutes Int             @default(0)
  difficulty       Float           @default(1.0) // 1.0-5.0
  intensityLevel   CourseIntensity @default(REGULAR)

  // Content Organization
  settings Json @default("{}")
  metadata Json @default("{}")

  // Accessibility
  accessibility Json @default("{\"captions\": false, \"transcripts\": false, \"audioDescription\": false, \"signLanguage\": false}")

  // Analytics & Performance
  views          Int   @default(0)
  uniqueViews    Int   @default(0)
  avgRating      Float @default(0)
  totalRatings   Int   @default(0)
  completionRate Float @default(0)

  // Content Counts
  totalSections      Int @default(0)
  totalLectures      Int @default(0)
  totalQuizzes       Int @default(0)
  totalAssignments   Int @default(0)
  totalContentItems  Int @default(0)
  totalDiscussions   Int @default(0)
  totalAnnouncements Int @default(0)

  // Advanced Features
  hasLiveSessions       Boolean @default(false)
  hasRecordings         Boolean @default(false)
  hasDiscussions        Boolean @default(true)
  hasAssignments        Boolean @default(false)
  hasQuizzes            Boolean @default(false)
  downloadableResources Boolean @default(true)
  offlineAccess         Boolean @default(false)
  mobileOptimized       Boolean @default(true)

  // Scheduling & Availability
  enrollmentStartDate DateTime?
  enrollmentEndDate   DateTime?
  courseStartDate     DateTime?
  courseEndDate       DateTime?

  // Capacity Management
  maxStudents        Int?
  currentEnrollments Int     @default(0)
  waitlistEnabled    Boolean @default(false)

  // Versioning
  version         String    @default("1.0")
  lastMajorUpdate DateTime?

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  archivedAt  DateTime?

  // Relationships
  instructorId    String
  instructor      User                 @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  sections        Section[]
  enrollments     Enrollment[]
  reviews         Review[]
  progress        Progress[]
  aiInteractions  AIInteraction[]
  certificates    Certificate[]
  discussions     Discussion[]
  contentItems    ContentItem[]
  learningPaths   CourseLearningPath[]
  bookmarks       CourseBookmark[]
  quizzes         Quiz[]
  assignments     Assignment[]
  announcements   CourseAnnouncement[]
  analytics       CourseAnalytics?
  paymentSessions PaymentSession[]

  @@map("courses")
}

model Section {
  id                String  @id @default(cuid())
  title             String
  description       String?
  order             Int     @default(0)
  isLocked          Boolean @default(false)
  isRequired        Boolean @default(true)
  estimatedDuration Int     @default(0) // in minutes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  courseId String
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lectures Lecture[]

  @@map("sections")
}

model Lecture {
  id          String      @id @default(cuid())
  title       String
  description String?
  type        LectureType
  content     String? // Rich text content

  // Enhanced lecture properties
  duration      Int     @default(0) // in seconds
  order         Int     @default(0)
  isPreview     Boolean @default(false)
  isInteractive Boolean @default(false)
  isRequired    Boolean @default(true)
  isLocked      Boolean @default(false)
  isCompleted   Boolean @default(false)

  // Video-specific fields
  videoUrl      String?
  videoProvider VideoProvider?
  videoDuration Int? // in seconds

  // AI & Advanced Features
  hasAIQuiz      Boolean @default(false)
  aiSummary      String?
  transcription  String?
  autoTranscript Boolean @default(false)

  // Accessibility
  captions   String? // VTT file URL
  transcript String? // Full transcript

  // Lecture settings and metadata
  settings Json @default("{}")
  metadata Json @default("{}")

  // Download & Offline
  downloadable   Boolean @default(false)
  offlineContent String? // Offline package URL

  // Status tracking
  status String? // "draft", "published", "archived"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  sectionId      String
  section        Section                @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  progress       Progress[]
  discussions    Discussion[]
  contentItem    ContentItem?
  notes          LectureNote[]
  resources      LectureResource[]
  ratings        LectureRating[]
  issues         LectureIssue[]
  accessRequests LectureAccessRequest[]
  transcripts    LectureTranscript[]
  summaries      LectureSummary[]
  analytics      LectureAnalytics?

  @@map("lectures")
}

model ContentItem {
  id             String      @id @default(cuid())
  title          String
  description    String?
  type           ContentType
  fileUrl        String?
  fileName       String?
  fileSize       Int? // in bytes
  mimeType       String?
  contentData    Json        @default("{}")
  version        String?
  checksum       String?
  order          Int         @default(0)
  isPublished    Boolean     @default(false)
  isDownloadable Boolean     @default(true)
  requiresAuth   Boolean     @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  courseId  String?
  course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lectureId String?  @unique
  lecture   Lecture? @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@map("content_items")
}

model Quiz {
  id           String  @id @default(cuid())
  title        String
  description  String?
  instructions String?

  // Quiz settings
  timeLimit    Int? // in minutes
  attempts     Int     @default(1)
  passingScore Float   @default(70)
  showResults  Boolean @default(true)
  randomize    Boolean @default(false)

  // Metadata
  isPublished Boolean @default(false)
  order       Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  courseId     String
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions    QuizQuestion[]
  quizAttempts QuizAttempt[]  @relation("QuizAttempts")

  @@map("quizzes")
}

model QuizQuestion {
  id            String       @id @default(cuid())
  question      String
  type          QuestionType
  options       Json         @default("[]") // Array of options
  correctAnswer Json         @default("{}")
  explanation   String?
  points        Float        @default(1)
  order         Int          @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_questions")
}

model QuizAttempt {
  id          String  @id @default(cuid())
  score       Float   @default(0)
  totalPoints Float   @default(0)
  percentage  Float   @default(0)
  passed      Boolean @default(false)
  timeSpent   Int     @default(0) // in seconds
  answers     Json    @default("{}")

  startedAt   DateTime  @default(now())
  completedAt DateTime?

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId String
  quiz   Quiz   @relation("QuizAttempts", fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model Assignment {
  id           String  @id @default(cuid())
  title        String
  description  String
  instructions String?

  // Assignment settings
  dueDate             DateTime?
  points              Float          @default(100)
  submissionType      AssignmentType @default(TEXT)
  allowLateSubmission Boolean        @default(false)
  maxFileSize         Int? // in MB

  // Metadata
  isPublished Boolean @default(false)
  order       Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  courseId    String
  course      Course                 @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions AssignmentSubmission[]

  @@map("assignments")
}

model AssignmentSubmission {
  id       String           @id @default(cuid())
  content  String?
  fileUrls String[]         @default([])
  status   SubmissionStatus @default(DRAFT)

  // Grading
  grade    Float?
  feedback String?
  gradedBy String? // Instructor user ID
  gradedAt DateTime?

  submittedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@map("assignment_submissions")
}

model LectureNote {
  id        String  @id @default(cuid())
  content   String
  timestamp Int? // Video timestamp if applicable
  isPrivate Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lectureId String
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@map("lecture_notes")
}

model Enrollment {
  id               String           @id @default(cuid())
  enrolledAt       DateTime         @default(now())
  completedAt      DateTime?
  status           EnrollmentStatus @default(ACTIVE)
  progress         Float            @default(0) // 0-100
  currentLectureId String?

  // Enhanced enrollment features
  enrollmentSource  EnrollmentSource @default(DIRECT)
  completedLectures Int              @default(0)
  totalLectures     Int              @default(0)

  // Payment Info
  paymentStatus   PaymentStatus @default(FREE)
  paymentId       String?
  amountPaid      Float?
  discountApplied Float?        @default(0)

  // Learning Analytics
  totalTimeSpent Int       @default(0) // in minutes
  streakDays     Int       @default(0)
  lastAccessedAt DateTime?

  // Certificates
  certificateEarned   Boolean   @default(false)
  certificateEarnedAt DateTime?

  // Additional fields from GraphQL queries
  type                 EnrollmentType   @default(FREE)
  source               EnrollmentSource @default(DIRECT)
  amount               Float            @default(0)
  currency             String           @default("USD")
  paidAt               DateTime?
  expiresAt            DateTime?
  notes                String?
  completionPercentage Float            @default(0)

  // Relationships
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId        String
  course          Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  paymentSessions PaymentSession[]

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Progress {
  id        String  @id @default(cuid())
  userId    String
  courseId  String
  lectureId String?
  sectionId String?

  // Progress tracking
  progress  Float   @default(0) // 0.0-1.0
  completed Boolean @default(false)
  watchTime Int     @default(0) // in seconds
  timeSpent Int     @default(0) // in minutes

  // Additional tracking
  lastWatchedAt DateTime?
  completedAt   DateTime?
  streakDays    Int       @default(0)

  // Interaction tracking
  interactions      Json    @default("{}") // Track user interactions
  difficultyRating  Float? // User's rating of difficulty
  aiRecommendations String? // AI-generated recommendations

  // Certificate tracking
  certificateEarned   Boolean   @default(false)
  certificateIssuedAt DateTime?

  // Current position
  currentLessonId String? // ID of current lesson
  currentTime     Int     @default(0) // Current position in video/audio (seconds)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lecture Lecture? @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, lectureId])
  @@map("progress")
}

model Review {
  id           String  @id @default(cuid())
  rating       Int     @default(1) // 1-5 stars
  comment      String?
  isVerified   Boolean @default(false)
  helpfulCount Int     @default(0)

  // Enhanced review details
  courseQuality    Int? // 1-5
  instructorRating Int? // 1-5
  difficultyRating Int? // 1-5
  valueForMoney    Int? // 1-5

  // Review status
  status       ReviewStatus @default(PUBLISHED)
  flaggedCount Int          @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("reviews")
}

model CourseBookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relationships
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_bookmarks")
}

model LearningPath {
  id          String      @id @default(cuid())
  title       String
  description String
  category    String
  level       CourseLevel

  // Path properties
  estimatedDuration Int // in hours
  totalCourses      Int @default(0)

  // Metadata
  isPublished Boolean @default(false)
  isFeatured  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  courses CourseLearningPath[]
  users   UserLearningPath[]

  @@map("learning_paths")
}

model CourseLearningPath {
  id         String  @id @default(cuid())
  order      Int     @default(0)
  isRequired Boolean @default(true)

  // Relationships
  pathId   String
  path     LearningPath @relation(fields: [pathId], references: [id], onDelete: Cascade)
  courseId String
  course   Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([pathId, courseId])
  @@map("course_learning_paths")
}

model UserLearningPath {
  id          String    @id @default(cuid())
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  progress    Float     @default(0) // 0-100

  // Relationships
  userId String
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pathId String
  path   LearningPath @relation(fields: [pathId], references: [id], onDelete: Cascade)

  @@unique([userId, pathId])
  @@map("user_learning_paths")
}

model CourseAnnouncement {
  id       String               @id @default(cuid())
  title    String
  content  String
  priority AnnouncementPriority @default(NORMAL)

  // Scheduling
  publishAt DateTime  @default(now())
  expiresAt DateTime?

  // Targeting
  sendEmail Boolean @default(false)
  sendPush  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_announcements")
}

// AI Features (keeping existing models with enhancements)
model AIInteraction {
  id        String            @id @default(cuid())
  type      AIInteractionType
  query     String
  response  String
  context   Json              @default("{}")
  isHelpful Boolean?

  // Enhanced AI features
  confidence     Float? // AI confidence score
  processingTime Int? // in milliseconds

  createdAt DateTime @default(now())

  // Relationships
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)

  @@map("ai_interactions")
}

model Certificate {
  id            String    @id @default(cuid())
  certificateId String    @unique
  templateUrl   String
  issueDate     DateTime  @default(now())
  expiryDate    DateTime? // For certificates that expire
  isVerified    Boolean   @default(true)

  // Enhanced certificate data
  completionScore Float?
  completionTime  Int // hours
  grade           String? // Letter grade

  // Verification
  verificationCode String  @unique
  isPublic         Boolean @default(false)

  // Relationships
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("certificates")
}

model Discussion {
  id         String         @id @default(cuid())
  title      String?
  content    String
  type       DiscussionType @default(QUESTION)
  isResolved Boolean        @default(false)
  isPinned   Boolean        @default(false)
  upvotes    Int            @default(0)
  downvotes  Int            @default(0)

  // Enhanced discussion features
  tags        String[] @default([])
  isAnonymous Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String?
  course    Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lectureId String?
  lecture   Lecture?     @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Discussion?  @relation("DiscussionReplies", fields: [parentId], references: [id])
  replies   Discussion[] @relation("DiscussionReplies")

  @@map("discussions")
}

model Notification {
  id      String           @id @default(cuid())
  title   String
  message String
  type    NotificationType
  isRead  Boolean          @default(false)
  data    Json             @default("{}")

  // Enhanced notifications
  priority  NotificationPriority @default(NORMAL)
  actionUrl String?

  createdAt DateTime  @default(now())
  expiresAt DateTime?

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enhanced Enums
enum UserRole {
  VISITOR
  STUDENT
  INSTRUCTOR
  ADMIN
  SUPER_ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum LearningStyle {
  VISUAL
  AUDITORY
  READING_WRITING
  KINESTHETIC
  MULTIMODAL
}

enum InstructorStatus {
  NOT_APPLIED
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  SUSPENDED
  PROBATION
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  REQUIRES_MORE_INFO
  INTERVIEW_SCHEDULED
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
  ALL_LEVELS
}

enum CourseIntensity {
  LIGHT
  REGULAR
  INTENSIVE
  BOOTCAMP
}

enum CourseStatus {
  DRAFT
  UNDER_REVIEW
  PUBLISHED
  ARCHIVED
  SUSPENDED
  COMING_SOON
}

enum EnrollmentType {
  FREE
  PAID
  SUBSCRIPTION
  INVITATION_ONLY
  WAITLIST
}

enum EnrollmentSource {
  DIRECT
  REFERRAL
  PROMOTION
  BUNDLE
  LEARNING_PATH
}

enum LectureType {
  VIDEO
  TEXT
  AUDIO
  QUIZ
  IMAGE
  DOCUMENT
  RESOURCE
  ASSIGNMENT
}

enum VideoProvider {
  YOUTUBE
  VIMEO
  WISTIA
  SELF_HOSTED
  AWS_S3
  CLOUDINARY
}

enum ContentType {
  VIDEO
  AUDIO
  DOCUMENT
  TEXT
  QUIZ
  ASSIGNMENT
  RESOURCE
  IMAGE
  ARCHIVE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
  FILL_IN_BLANK
  ESSAY
  MATCHING
  ORDERING
  NUMERIC
}

enum AssignmentType {
  TEXT
  FILE_UPLOAD
  URL_SUBMISSION
  PEER_REVIEW
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  GRADED
  RETURNED
  LATE
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  SUSPENDED
  REFUNDED
  EXPIRED
}

enum PaymentStatus {
  FREE
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIAL_REFUND
  CANCELED
  EXPIRED
}

enum PaymentSessionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELED
  EXPIRED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum ReviewStatus {
  PUBLISHED
  PENDING
  FLAGGED
  HIDDEN
}

enum AIInteractionType {
  QUESTION
  EXPLANATION
  QUIZ_GENERATION
  SUMMARY
  RECOMMENDATION
  TUTORING
  CODE_REVIEW
  CONTENT_ANALYSIS
}

enum DiscussionType {
  QUESTION
  ANSWER
  ANNOUNCEMENT
  GENERAL
  BUG_REPORT
  FEATURE_REQUEST
}

enum NotificationType {
  COURSE_UPDATE
  NEW_LECTURE
  ASSIGNMENT_DUE
  CERTIFICATE_EARNED
  DISCUSSION_REPLY
  INSTRUCTOR_APPROVED
  SYSTEM_ANNOUNCEMENT
  AI_RECOMMENDATION
  ENROLLMENT_CONFIRMATION
  PAYMENT_CONFIRMATION
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum AnnouncementPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model LectureResource {
  id             String    @id @default(cuid())
  name           String
  url            String
  type           String // "pdf", "video", "audio", "document", etc.
  description    String?
  fileSize       Int? // in bytes
  mimeType       String?
  isDownloadable Boolean   @default(true)
  requiresAuth   Boolean   @default(false)
  downloadCount  Int       @default(0)
  expiresAt      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  lectureId String
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@map("lecture_resources")
}

model LectureRating {
  id           String  @id @default(cuid())
  rating       Int     @default(1) // 1-5 stars
  feedback     String?
  isHelpful    Boolean @default(false)
  helpfulCount Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lectureId String
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@unique([userId, lectureId])
  @@map("lecture_ratings")
}

model LectureIssue {
  id          String    @id @default(cuid())
  issueType   String // "technical", "content", "accessibility", "other"
  description String
  status      String    @default("PENDING") // "PENDING", "IN_PROGRESS", "RESOLVED", "CLOSED"
  priority    String    @default("NORMAL") // "LOW", "NORMAL", "HIGH", "URGENT"
  assignedTo  String? // User ID of assigned staff
  resolution  String?
  resolvedAt  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lectureId String
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@map("lecture_issues")
}

model LectureAccessRequest {
  id         String    @id @default(cuid())
  reason     String?
  status     String    @default("PENDING") // "PENDING", "APPROVED", "REJECTED"
  approvedBy String? // User ID of approver
  approvedAt DateTime?
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lectureId String
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@map("lecture_access_requests")
}

model LectureTranscript {
  id         String    @id @default(cuid())
  content    String
  language   String    @default("en")
  timestamps Json      @default("{}") // Timestamp mapping
  accuracy   Float     @default(0.0) // 0.0-1.0 accuracy score
  isVerified Boolean   @default(false)
  verifiedBy String? // User ID of verifier
  verifiedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  lectureId String
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@map("lecture_transcripts")
}

model LectureSummary {
  id                   String   @id @default(cuid())
  content              String
  keyPoints            String[] @default([])
  difficulty           Float    @default(1.0) // 1.0-5.0 difficulty rating
  estimatedReadingTime Int      @default(0) // in minutes
  isAI                 Boolean  @default(true)
  generatedBy          String? // User ID or "AI"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  lectureId String
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@map("lecture_summaries")
}

model LectureAnalytics {
  id        String  @id @default(cuid())
  lectureId String  @unique
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  // View analytics
  totalViews       Int   @default(0)
  uniqueViews      Int   @default(0)
  averageWatchTime Float @default(0) // in seconds
  completionRate   Float @default(0) // percentage
  engagementRate   Float @default(0) // percentage

  // Drop-off analysis
  dropOffPoints Json @default("[]") // Array of {time: number, percentage: number}

  // Popular segments
  popularSegments Json @default("[]") // Array of {startTime: number, endTime: number, viewCount: number}

  // User interactions
  userInteractions Json @default("[]") // Array of {type: string, count: number, timestamp: number}

  // Heatmap data
  heatmapData Json @default("{}") // Time-based interaction heatmap

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lecture_analytics")
}

model CourseAnalytics {
  id       String @id @default(cuid())
  courseId String @unique
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Enrollment analytics
  totalEnrollments     Int   @default(0)
  activeEnrollments    Int   @default(0)
  completedEnrollments Int   @default(0)
  completionRate       Float @default(0) // percentage
  averageProgress      Float @default(0) // percentage

  // Revenue analytics
  totalRevenue                Float  @default(0)
  currency                    String @default("USD")
  averageRevenuePerEnrollment Float  @default(0)

  // Engagement analytics
  totalDiscussions Int   @default(0)
  totalReviews     Int   @default(0)
  averageTimeSpent Float @default(0) // in minutes
  retentionRate    Float @default(0) // percentage

  // Monthly trends
  monthlyEnrollments Json @default("{}") // {month: string, count: number}
  monthlyRevenue     Json @default("{}") // {month: string, amount: number}

  // Performance insights
  topPerformingLectures   Json     @default("[]")
  strugglingStudents      Int      @default(0)
  recommendedImprovements String[] @default([])
  contentGaps             String[] @default([])

  // Comparisons
  categoryAverage   Float @default(0)
  industryBenchmark Float @default(0)
  previousPeriod    Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("course_analytics")
}

// Payment System Models

model PaymentSession {
  id              String               @id @default(cuid())
  courseId        String
  userId          String
  status          PaymentSessionStatus @default(PENDING)
  amount          Int // Amount in cents
  currency        String               @default("USD")
  paymentIntentId String?              @unique
  enrollmentId    String?
  metadata        Json                 @default("{}")

  // Stripe-specific fields
  stripeSessionId  String? @unique
  stripeCustomerId String?

  // Coupon and discount information
  couponCode     String?
  discountAmount Int     @default(0)
  finalAmount    Int // Amount after discounts

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?

  // Relationships
  course     Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollment Enrollment? @relation(fields: [enrollmentId], references: [id], onDelete: SetNull)

  @@index([userId, courseId])
  @@index([paymentIntentId])
  @@index([status])
  @@map("payment_sessions")
}

model PaymentMethod {
  id                    String  @id @default(cuid())
  userId                String
  stripePaymentMethodId String  @unique
  type                  String // "card", "bank_account", etc.
  cardBrand             String?
  cardLast4             String?
  cardExpMonth          Int?
  cardExpYear           Int?
  billingDetails        Json    @default("{}")
  isDefault             Boolean @default(false)

  // Additional metadata
  metadata Json @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stripePaymentMethodId])
  @@map("payment_methods")
}

model Coupon {
  id            String       @id @default(cuid())
  code          String       @unique
  name          String
  description   String?
  discountType  DiscountType @default(PERCENTAGE)
  discountValue Float // Percentage or fixed amount
  currency      String       @default("USD")
  maxUses       Int?
  currentUses   Int          @default(0)
  isActive      Boolean      @default(true)

  // Validity period
  validFrom  DateTime?
  validUntil DateTime?

  // Usage restrictions
  minimumAmount     Int? // Minimum order amount in cents
  maximumDiscount   Int? // Maximum discount amount in cents
  applicableCourses String[] @default([]) // Course IDs this coupon applies to

  // Metadata
  metadata Json @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
  @@index([isActive])
  @@map("coupons")
}
