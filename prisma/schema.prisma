// Enhanced E-Learning Platform Prisma Schema
// Comprehensive AI-powered learning management system with live sessions

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// USER MANAGEMENT & PROFILES
// =============================================================================

model User {
  id           String    @id @default(cuid())
  clerkId      String    @unique
  email        String    @unique
  username     String?
  firstName    String?
  lastName     String?
  profileImage String?
  bio          String?
  phone        String?
  address      String?
  city         String?
  state        String?
  zip          String?
  country      String?
  dateOfBirth  DateTime?
  gender       Gender?

  // Enhanced user profile
  timezone String? @default("UTC")
  locale   String? @default("en")

  // Role Management
  role            UserRole @default(VISITOR)
  title           String?
  isEmailVerified Boolean  @default(false)
  isPhoneVerified Boolean  @default(false)

  // Instructor-specific fields
  instructorStatus InstructorStatus @default(NOT_APPLIED)
  instructorBio    String?
  expertise        String[]         @default([])
  qualifications   String[]         @default([])
  experience       Int? // years of experience
  socialLinks      Json             @default("{}")
  teachingRating   Float?           @default(0)
  totalStudents    Int?             @default(0)
  totalCourses     Int?             @default(0)

  // Learning preferences & analytics
  learningStyle      LearningStyle?
  preferredLanguages String[]       @default([])
  skillTags          String[]       @default([])

  // Platform engagement
  lastLoginAt DateTime?
  isActive    Boolean   @default(true)
  preferences Json      @default("{}")
  rating      Float?    @default(0)

  // Gamification
  totalPoints   Int      @default(0)
  currentStreak Int      @default(0)
  longestStreak Int      @default(0)
  achievements  String[] @default([])

  // Analytics fields
  totalTimeSpent        Int       @default(0) // in minutes
  totalCoursesEnrolled  Int       @default(0)
  totalCoursesCompleted Int       @default(0)
  averageCompletionRate Float     @default(0)
  lastActivityAt        DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // =============================================================================
  // PROFILE RELATIONS
  // =============================================================================
  instructorProfile InstructorProfile?
  studentProfile    StudentProfile?
  adminProfile      AdminProfile?

  // =============================================================================
  // COURSE RELATIONS
  // =============================================================================
  instructorCourses     Course[]               @relation("InstructorCourses")
  enrollments           Enrollment[]
  progress              Progress[]
  reviews               Review[]
  certificates          Certificate[]
  discussions           Discussion[]
  notifications         Notification[]
  courseDrafts          CourseDraft[]
  learningPaths         UserLearningPath[]
  courseBookmarks       CourseBookmark[]
  lectureNotes          LectureNote[]
  quizAttempts          QuizAttempt[]
  assignments           AssignmentSubmission[]
  lectureRatings        LectureRating[]
  lectureIssues         LectureIssue[]
  lectureAccessRequests LectureAccessRequest[]

  // =============================================================================
  // LIVE SESSIONS RELATIONS
  // =============================================================================
  availabilities       InstructorAvailability[]
  sessionOfferings     SessionOffering[]
  instructedSessions   LiveSession[]            @relation("InstructorSessions")
  sessionTopics        SessionTopic[]
  sessionReservations  SessionReservation[]
  sessionParticipants  SessionParticipant[]
  attendanceRecords    AttendanceRecord[]
  sessionReviews       SessionReview[]
  instructorPayouts    InstructorPayout[]
  sessionNotifications SessionNotification[]
  bookingRequests      BookingRequest[]

  // =============================================================================
  // PAYMENT RELATIONS
  // =============================================================================
  paymentSessions PaymentSession[]
  paymentMethods  PaymentMethod[]
  sessionPayments SessionPayment[]

  // Stripe Connect account for instructors
  stripeAccountId String?

  // =============================================================================
  // INSTRUCTOR VERIFICATION RELATIONS
  // =============================================================================
  instructorApplication InstructorApplication?
  aiInteractions        AIInteraction[]
  manualReviews         InstructorManualReview[]  @relation("ReviewerReviews")
  conductedInterviews   InstructorInterview[]     @relation("InterviewerInterviews")
  documentVerifications DocumentVerificationLog[]

  // =============================================================================
  // INSTRUCTOR RATING RELATIONS
  // =============================================================================
  instructorRatings      InstructorRating[] @relation("InstructorRatings")
  studentRatings         InstructorRating[] @relation("StudentRatings")

  @@map("users")
}

// =============================================================================
// AVAILABILITY MANAGEMENT - DAY BY DAY APPROACH
// =============================================================================

model InstructorAvailability {
  id           String @id @default(cuid())
  instructorId String
  instructor   User   @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  // DAILY AVAILABILITY (Day-by-day control as requested)
  specificDate DateTime // Each availability is for a specific date
  startTime    String // HH:MM format
  endTime      String // HH:MM format

  // Settings and rules
  isActive            Boolean @default(true)
  maxSessionsInSlot   Int     @default(1)
  defaultSlotDuration Int     @default(60) // Default, offerings can override
  minAdvanceHours     Int     @default(12)
  maxAdvanceHours     Int?    @default(720) // 30 days default
  bufferMinutes       Int     @default(15)
  autoAcceptBookings  Boolean @default(false)

  // Pricing overrides
  priceOverride Float?
  currency      String? @default("USD")

  // Metadata
  timezone String  @default("UTC")
  notes    String?
  title    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  generatedSlots TimeSlot[]

  @@unique([instructorId, specificDate, startTime, endTime])
  @@map("instructor_availabilities")
}

model TimeSlot {
  id             String                 @id @default(cuid())
  availabilityId String
  availability   InstructorAvailability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)

  // Slot details
  startTime    DateTime
  endTime      DateTime
  date         DateTime
  dayOfWeek    Int
  slotDuration Int // Actual duration for this specific slot

  // Status
  isAvailable Boolean @default(true)
  isBooked    Boolean @default(false)
  isBlocked   Boolean @default(false)

  // Booking info
  maxBookings     Int @default(1)
  currentBookings Int @default(0)

  // Metadata
  timezone    String
  generatedAt DateTime @default(now())

  // Relations
  bookingRequests BookingRequest[]
  sessions        LiveSession[]

  @@unique([availabilityId, startTime])
  @@index([date, isAvailable, isBooked])
  @@map("time_slots")
}

// =============================================================================
// FLEXIBLE SESSION TOPICS SYSTEM
// =============================================================================

model SessionTopic {
  id           String @id @default(cuid())
  instructorId String
  instructor   User   @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  name        String
  description String?
  category    String?
  difficulty  TopicDifficulty @default(BEGINNER)

  // Topic flexibility
  isCustom   Boolean @default(false)
  isActive   Boolean @default(true)
  isApproved Boolean @default(true)

  // Suggested session details
  suggestedDuration Int?
  suggestedFormat   SessionType?
  prerequisites     String[]     @default([])
  materials         String[]     @default([])

  // Usage statistics
  totalSessions Int   @default(0)
  averageRating Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions  LiveSession[]
  offerings SessionOffering[]

  @@map("session_topics")
}

// =============================================================================
// SESSION OFFERINGS SYSTEM
// =============================================================================

model SessionOffering {
  id           String @id @default(cuid())
  instructorId String
  instructor   User   @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  // Basic info
  title            String
  description      String
  shortDescription String?

  // Topic configuration
  topicType  SessionTopicType @default(FIXED)
  topicId    String?
  topic      SessionTopic?    @relation(fields: [topicId], references: [id], onDelete: SetNull)
  fixedTopic String?
  domain     String?
  tags       String[]         @default([])

  // Session configuration
  sessionType     SessionType   @default(INDIVIDUAL)
  sessionFormat   SessionFormat @default(ONLINE)
  duration        Int // minutes
  capacity        Int           @default(1)
  minParticipants Int?

  // Pricing
  basePrice Float
  currency  String @default("USD")

  // Policies
  cancellationPolicy CancellationPolicy @default(MODERATE)

  // Rules and settings
  isActive         Boolean @default(true)
  isPublic         Boolean @default(true)
  requiresApproval Boolean @default(false)

  // Content
  materials     String[] @default([])
  prerequisites String[] @default([])
  equipment     String[] @default([])

  // Features
  recordingEnabled   Boolean @default(false)
  whiteboardEnabled  Boolean @default(true)
  screenShareEnabled Boolean @default(true)
  chatEnabled        Boolean @default(true)

  // Statistics
  totalBookings Int   @default(0)
  totalRevenue  Float @default(0)
  averageRating Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookingRequests BookingRequest[]
  liveSessions    LiveSession[]

  @@map("session_offerings")
}

// =============================================================================
// BOOKING SYSTEM WITH DUAL MODES
// =============================================================================

model BookingRequest {
  id         String          @id @default(cuid())
  offeringId String
  offering   SessionOffering @relation(fields: [offeringId], references: [id], onDelete: Cascade)
  studentId  String
  student    User            @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Booking approach
  bookingMode BookingMode @default(REQUEST)

  // Request-based booking
  preferredDate    DateTime?
  preferredTime    String?
  alternativeDates DateTime[] @default([])

  // Direct slot booking
  timeSlotId String?
  timeSlot   TimeSlot? @relation(fields: [timeSlotId], references: [id], onDelete: SetNull)

  // Custom requirements
  customTopic        String?
  topicDescription   String?
  customRequirements String?
  studentMessage     String?
  instructorResponse String?

  // Status management
  status          BookingStatus @default(PENDING)
  priority        Int           @default(1)
  rescheduleCount Int           @default(0)

  // Pricing
  offeredPrice Float
  finalPrice   Float?
  currency     String @default("USD")

  // Payment
  paymentStatus   PaymentStatus @default(PENDING)
  paymentIntentId String?
  stripeSessionId String?

  // Timestamps
  expiresAt   DateTime
  respondedAt DateTime?
  acceptedAt  DateTime?
  rejectedAt  DateTime?
  cancelledAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  liveSession   LiveSession?
  notifications SessionNotification[]

  @@map("booking_requests")
}

// =============================================================================
// LIVE SESSIONS - FLEXIBLE & COMPREHENSIVE
// =============================================================================

model LiveSession {
  id String @id @default(cuid())

  // Session can be booking-based OR standalone
  bookingRequestId String?         @unique
  bookingRequest   BookingRequest? @relation(fields: [bookingRequestId], references: [id], onDelete: SetNull)

  offeringId String
  offering   SessionOffering @relation(fields: [offeringId], references: [id], onDelete: Cascade)

  instructorId String
  instructor   User   @relation("InstructorSessions", fields: [instructorId], references: [id], onDelete: Cascade)

  // Flexibility: Course-based OR Custom
  sessionType LiveSessionType @default(CUSTOM)

  // Course-based sessions
  courseId  String?
  course    Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)
  lectureId String?

  // Custom sessions
  topicId     String?
  topic       SessionTopic? @relation(fields: [topicId], references: [id], onDelete: SetNull)
  customTopic String?

  // Session details
  title       String
  description String?
  finalTopic  String?

  // Format and mode
  format        SessionType   @default(INDIVIDUAL)
  sessionFormat SessionFormat @default(ONLINE)
  sessionMode   SessionMode   @default(LIVE)

  // Capacity management
  maxParticipants     Int @default(1)
  minParticipants     Int @default(1)
  currentParticipants Int @default(0)

  // Scheduling
  scheduledStart DateTime
  scheduledEnd   DateTime
  actualStart    DateTime?
  actualEnd      DateTime?
  duration       Int // planned duration
  actualDuration Int? // actual duration

  // Status
  status SessionStatus @default(SCHEDULED)

  // Technical setup
  meetingRoomId    String?
  meetingLink      String?
  meetingPassword  String?
  recordingUrl     String?
  recordingEnabled Boolean @default(false)

  // Content and artifacts
  materials        String[] @default([])
  sessionNotes     String?
  instructorNotes  String?
  summary          String?
  sessionArtifacts String[] @default([])

  // Financial
  pricePerPerson   Float
  totalPrice       Float?
  totalRevenue     Float        @default(0)
  platformFee      Float        @default(0)
  instructorPayout Float        @default(0)
  currency         String       @default("USD")
  payoutStatus     PayoutStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  timeSlot       TimeSlot?             @relation(fields: [timeSlotId], references: [id])
  timeSlotId     String?
  reservations   SessionReservation[]
  participants   SessionParticipant[]
  attendance     AttendanceRecord[]
  reviews        SessionReview[]
  payments       SessionPayment[]
  payoutSessions PayoutSession[]
  notifications  SessionNotification[]

  @@map("live_sessions")
}

// =============================================================================
// RESERVATION SYSTEM WITH FULL LIFECYCLE
// =============================================================================

model SessionReservation {
  id        String      @id @default(cuid())
  sessionId String
  session   LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  learnerId String
  learner   User        @relation(fields: [learnerId], references: [id], onDelete: Cascade)

  // Reservation lifecycle
  status ReservationStatus @default(PENDING)

  // Payment tracking
  paymentStatus PaymentStatus @default(PENDING)
  paymentDue    DateTime?

  // Attendance
  attendance AttendanceStatus @default(NOT_ATTENDED)
  joinedAt   DateTime?
  leftAt     DateTime?
  totalTime  Int              @default(0) // minutes

  // Custom requirements
  requestedTopic  String?
  learnerNotes    String?
  instructorNotes String?

  // Pricing
  agreedPrice Float
  currency    String @default("USD")

  // Timestamps
  reservedAt  DateTime  @default(now())
  confirmedAt DateTime?
  cancelledAt DateTime?
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  payments SessionPayment[]

  @@unique([sessionId, learnerId])
  @@map("session_reservations")
}

// =============================================================================
// FLEXIBLE PAYMENT SYSTEM
// =============================================================================

model SessionPayment {
  id String @id @default(cuid())

  // Can be linked to reservation OR session directly
  reservationId String?
  reservation   SessionReservation? @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  sessionId     String
  session       LiveSession         @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  payerId       String
  payer         User                @relation(fields: [payerId], references: [id], onDelete: Cascade)

  // Payment details
  amount   Float
  currency String @default("USD")

  // Flexible timing
  paymentTiming PaymentTiming @default(BEFORE_SESSION)

  // Status and processing
  status          PaymentStatus @default(PENDING)
  paymentMethod   String?
  transactionId   String?
  stripePaymentId String?

  // Refund handling
  refundAmount Float     @default(0)
  refundReason String?
  refundedAt   DateTime?

  // Timestamps
  dueAt  DateTime?
  paidAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session_payments")
}

// =============================================================================
// SESSION PARTICIPANTS & ATTENDANCE
// =============================================================================

model SessionParticipant {
  id        String      @id @default(cuid())
  sessionId String
  session   LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  role       ParticipantRole   @default(STUDENT)
  status     ParticipantStatus @default(ENROLLED)
  deviceType DeviceType        @default(DESKTOP)

  // Payment details
  paidAmount  Float     @default(0)
  currency    String    @default("USD")
  paymentDate DateTime?

  // Participation tracking
  joinedAt  DateTime?
  leftAt    DateTime?
  totalTime Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sessionId, userId])
  @@map("session_participants")
}

model AttendanceRecord {
  id        String      @id @default(cuid())
  sessionId String
  session   LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  joinedAt DateTime?
  leftAt   DateTime?
  duration Int              @default(0)
  status   AttendanceStatus @default(ABSENT)

  // Engagement metrics
  cameraOnTime    Int   @default(0)
  micActiveTime   Int   @default(0)
  chatMessages    Int   @default(0)
  questionsAsked  Int   @default(0)
  pollResponses   Int   @default(0)
  engagementScore Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sessionId, userId])
  @@map("attendance_records")
}

// =============================================================================
// REVIEWS & FEEDBACK
// =============================================================================

model SessionReview {
  id         String      @id @default(cuid())
  sessionId  String
  session    LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  reviewerId String
  reviewer   User        @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  reviewType ReviewType @default(SESSION)

  // Ratings (1-5)
  overallRating    Int
  contentQuality   Int?
  instructorRating Int?
  technicalQuality Int?
  valueForMoney    Int?

  // Feedback
  positives    String?
  improvements String?
  comment      String?

  // Metadata
  isVerified   Boolean @default(false)
  isPublic     Boolean @default(true)
  helpfulVotes Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sessionId, reviewerId])
  @@map("session_reviews")
}

// =============================================================================
// PAYOUT SYSTEM
// =============================================================================

model PayoutSession {
  id        String           @id @default(cuid())
  payoutId  String
  payout    InstructorPayout @relation(fields: [payoutId], references: [id], onDelete: Cascade)
  sessionId String
  session   LiveSession      @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  sessionAmount Float
  platformFee   Float
  netAmount     Float

  createdAt DateTime @default(now())

  @@unique([payoutId, sessionId])
  @@map("payout_sessions")
}

model InstructorPayout {
  id           String @id @default(cuid())
  instructorId String
  instructor   User   @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  // Payout details
  amount      Float
  platformFee Float
  netAmount   Float
  currency    String @default("USD")

  // Status and processing
  status       PayoutStatus @default(PENDING)
  payoutMethod String?

  // Session relations via join table
  payoutSessions PayoutSession[]

  // Processing details
  scheduledDate DateTime
  processedAt   DateTime?
  paidAt        DateTime?
  failedAt      DateTime?
  failureReason String?

  // External references
  stripePayoutId String?
  bankTransferId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("instructor_payouts")
}

// =============================================================================
// NOTIFICATIONS SYSTEM
// =============================================================================

model SessionNotification {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type    NotificationType
  title   String
  message String
  data    Json             @default("{}")

  // Delivery management
  isRead         Boolean        @default(false)
  isEmail        Boolean        @default(false)
  isPush         Boolean        @default(false)
  isSMS          Boolean        @default(false)
  deliveryStatus DeliveryStatus @default(QUEUED)

  // Relations
  sessionId        String?
  session          LiveSession?    @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  bookingRequestId String?
  bookingRequest   BookingRequest? @relation(fields: [bookingRequestId], references: [id], onDelete: SetNull)

  // Scheduling
  scheduledFor DateTime  @default(now())
  sentAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session_notifications")
}

// =============================================================================
// EXISTING MODELS (Course System) - Maintaining compatibility
// =============================================================================

model InstructorProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // =============================================================================
  // PROFESSIONAL INFORMATION
  // =============================================================================
  title           String?
  bio             String?
  shortBio        String?
  expertise       String[] @default([])
  qualifications  String[] @default([])
  experience      Int?     @default(0)
  socialLinks     Json     @default("{}")
  personalWebsite String?
  linkedinProfile String?

  // =============================================================================
  // TEACHING SPECIALIZATION
  // =============================================================================
  subjectsTeaching    String[] @default([])
  teachingCategories  String[] @default([])
  languagesSpoken     Json     @default("[]")
  teachingStyle       String?
  targetAudience      String?
  teachingMethodology String?

  // =============================================================================
  // LIVE SESSIONS CONFIGURATION
  // =============================================================================
  liveSessionsEnabled    Boolean     @default(false)
  defaultSessionDuration Int         @default(60) // minutes
  defaultSessionType     SessionType @default(INDIVIDUAL)
  preferredGroupSize     Int         @default(5)
  bufferBetweenSessions  Int         @default(15) // minutes
  maxSessionsPerDay      Int         @default(8)
  minAdvanceBooking      Int         @default(12) // hours
  autoAcceptBookings     Boolean     @default(false)
  instantMeetingEnabled  Boolean     @default(false)

  // =============================================================================
  // PRICING CONFIGURATION
  // =============================================================================
  individualSessionRate Float? @default(50)
  groupSessionRate      Float? @default(30)
  currency              String @default("USD")
  platformFeeRate       Float  @default(20) // percentage

  // =============================================================================
  // DEFAULT POLICIES
  // =============================================================================
  defaultCancellationPolicy CancellationPolicy @default(MODERATE)
  defaultSessionFormat      SessionFormat      @default(ONLINE)

  // =============================================================================
  // PLATFORM STATISTICS
  // =============================================================================
  teachingRating    Float @default(0)
  totalStudents     Int   @default(0)
  totalCourses      Int   @default(0)
  totalLiveSessions Int   @default(0)
  totalRevenue      Float @default(0)

  // =============================================================================
  // PERFORMANCE METRICS
  // =============================================================================
  averageCourseRating   Float @default(0)
  averageSessionRating  Float @default(0)
  studentRetentionRate  Float @default(0)
  courseCompletionRate  Float @default(0)
  sessionCompletionRate Float @default(0)
  responseTime          Int   @default(0) // hours
  studentSatisfaction   Float @default(0)

  // =============================================================================
  // CONTENT CREATION STATS
  // =============================================================================
  totalLectures     Int @default(0)
  totalVideoHours   Int @default(0)
  totalQuizzes      Int @default(0)
  totalAssignments  Int @default(0)
  contentUpdateFreq Int @default(0)

  // =============================================================================
  // ACTIVITY TRACKING
  // =============================================================================
  lastCourseUpdate    DateTime?
  lastStudentReply    DateTime?
  lastContentCreation DateTime?

  // =============================================================================
  // FINANCIAL INFORMATION
  // =============================================================================
  payoutSettings     Json  @default("{}")
  taxInformation     Json  @default("{}")
  paymentPreferences Json  @default("{}")
  revenueSharing     Float @default(70)

  // =============================================================================
  // MARKETING & PROMOTION
  // =============================================================================
  isPromotionEligible Boolean  @default(true)
  marketingConsent    Boolean  @default(false)
  featuredInstructor  Boolean  @default(false)
  badgesEarned        String[] @default([])

  // =============================================================================
  // TEACHING AVAILABILITY
  // =============================================================================
  isAcceptingStudents  Boolean @default(true)
  maxStudentsPerCourse Int?

  // =============================================================================
  // VERIFICATION & COMPLIANCE
  // =============================================================================
  isVerified           Boolean   @default(false)
  verificationLevel    String?
  lastVerificationDate DateTime?
  complianceStatus     String?   @default("COMPLIANT")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("instructor_profiles")
}

model StudentProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Learning Preferences
  learningStyle      LearningStyle?
  preferredLanguages String[]       @default([])
  interests          String[]       @default([])
  skillLevel         StudentLevel   @default(BEGINNER)
  learningGoals      String[]       @default([])

  // Academic Background
  education     String?
  fieldOfStudy  String?
  currentStatus String?
  industry      String?
  jobTitle      String?

  // Learning Analytics
  totalTimeSpent        Int       @default(0)
  totalCoursesEnrolled  Int       @default(0)
  totalCoursesCompleted Int       @default(0)
  averageCompletionRate Float     @default(0)
  lastActivityAt        DateTime?
  studyStreak           Int       @default(0)
  longestStreak         Int       @default(0)

  // Gamification
  totalPoints     Int      @default(0)
  level           Int      @default(1)
  badges          String[] @default([])
  achievements    String[] @default([])
  leaderboardRank Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("student_profiles")
}

model AdminProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  adminLevel  AdminLevel @default(MODERATOR)
  department  String?
  title       String?
  permissions String[]   @default([])
  accessLevel Int        @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin_profiles")
}

model CourseDraft {
  id           String @id @default(cuid())
  instructorId String
  instructor   User   @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  draftType       DraftType @default(COURSE)
  draftData       Json      @default("{}")
  currentStep     Int       @default(0)
  completionScore Int       @default(0)
  version         Int       @default(1)

  // Auto-save tracking
  lastAutoSave DateTime?
  saveCount    Int       @default(0)

  // Metadata
  title       String?
  description String?
  isTemplate  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("course_drafts")
}

model Course {
  id               String      @id @default(cuid())
  title            String
  description      String
  shortDescription String?
  category         String
  subcategory      String?
  level            CourseLevel @default(BEGINNER)

  // Enhanced media
  thumbnail     String?
  trailer       String?
  galleryImages String[] @default([])

  // Pricing & Monetization
  price              Float     @default(0)
  originalPrice      Float?
  currency           String    @default("USD")
  discountPercent    Float?    @default(0)
  discountValidUntil DateTime?

  // Course Content Structure
  objectives    String[] @default([])
  prerequisites String[] @default([])
  whatYouLearn  String[] @default([])
  requirements  String[] @default([])

  // Enhanced SEO & Marketing
  seoTitle       String?
  seoDescription String?
  seoTags        String[] @default([])
  marketingTags  String[] @default([])
  targetAudience String[] @default([])

  // Course Settings & Features
  status            CourseStatus   @default(DRAFT)
  enrollmentType    EnrollmentType @default(FREE)
  language          String         @default("en")
  subtitleLanguages String[]       @default([])
  isPublic          Boolean        @default(true)
  isFeatured        Boolean        @default(false)
  isBestseller      Boolean        @default(false)
  isTrending        Boolean        @default(false)
  isNew             Boolean        @default(false)

  // Certificates & Completion
  certificate         Boolean @default(false)
  certificateTemplate String?
  passingGrade        Float   @default(70)
  allowRetakes        Boolean @default(true)
  maxAttempts         Int?

  // Duration & Difficulty
  estimatedHours   Int             @default(0)
  estimatedMinutes Int             @default(0)
  difficulty       Float           @default(1.0)
  intensityLevel   CourseIntensity @default(REGULAR)

  // Content Organization
  settings Json @default("{}")
  metadata Json @default("{}")

  // Accessibility
  accessibility Json @default("{\"captions\": false, \"transcripts\": false, \"audioDescription\": false, \"signLanguage\": false}")

  // Analytics & Performance
  views          Int   @default(0)
  uniqueViews    Int   @default(0)
  avgRating      Float @default(0)
  totalRatings   Int   @default(0)
  completionRate Float @default(0)

  // Content Counts
  totalSections      Int @default(0)
  totalLectures      Int @default(0)
  totalQuizzes       Int @default(0)
  totalAssignments   Int @default(0)
  totalContentItems  Int @default(0)
  totalDiscussions   Int @default(0)
  totalAnnouncements Int @default(0)

  // Advanced Features
  hasLiveSessions       Boolean @default(false)
  hasRecordings         Boolean @default(false)
  hasDiscussions        Boolean @default(true)
  hasAssignments        Boolean @default(false)
  hasQuizzes            Boolean @default(false)
  downloadableResources Boolean @default(true)
  offlineAccess         Boolean @default(false)
  mobileOptimized       Boolean @default(true)

  // Scheduling & Availability
  enrollmentStartDate DateTime?
  enrollmentEndDate   DateTime?
  courseStartDate     DateTime?
  courseEndDate       DateTime?

  // Capacity Management
  maxStudents        Int?
  currentEnrollments Int     @default(0)
  waitlistEnabled    Boolean @default(false)

  // Versioning
  version         String    @default("1.0")
  lastMajorUpdate DateTime?

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  archivedAt  DateTime?

  // Relationships
  instructorId    String
  instructor      User                 @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  sections        Section[]
  enrollments     Enrollment[]
  reviews         Review[]
  progress        Progress[]
  aiInteractions  AIInteraction[]
  certificates    Certificate[]
  discussions     Discussion[]
  contentItems    ContentItem[]
  learningPaths   CourseLearningPath[]
  bookmarks       CourseBookmark[]
  quizzes         Quiz[]
  assignments     Assignment[]
  announcements   CourseAnnouncement[]
  analytics       CourseAnalytics?
  paymentSessions PaymentSession[]

  // Live sessions relation
  liveSessions LiveSession[]

  @@map("courses")
}

model Section {
  id                String  @id @default(cuid())
  title             String
  description       String?
  order             Int     @default(0)
  isLocked          Boolean @default(false)
  isRequired        Boolean @default(true)
  estimatedDuration Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lectures Lecture[]

  @@map("sections")
}

model Lecture {
  id          String      @id @default(cuid())
  title       String
  description String?
  type        LectureType
  content     String?

  duration      Int     @default(0)
  order         Int     @default(0)
  isPreview     Boolean @default(false)
  isInteractive Boolean @default(false)
  isRequired    Boolean @default(true)
  isLocked      Boolean @default(false)
  isCompleted   Boolean @default(false)

  videoUrl      String?
  videoProvider VideoProvider?
  videoDuration Int?

  hasAIQuiz      Boolean @default(false)
  aiSummary      String?
  transcription  String?
  autoTranscript Boolean @default(false)

  captions   String?
  transcript String?

  settings Json @default("{}")
  metadata Json @default("{}")

  downloadable   Boolean @default(false)
  offlineContent String?

  status String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sectionId      String
  section        Section                @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  progress       Progress[]
  discussions    Discussion[]
  contentItem    ContentItem?
  notes          LectureNote[]
  resources      LectureResource[]
  ratings        LectureRating[]
  issues         LectureIssue[]
  accessRequests LectureAccessRequest[]
  transcripts    LectureTranscript[]
  summaries      LectureSummary[]
  analytics      LectureAnalytics?

  @@map("lectures")
}

model ContentItem {
  id             String      @id @default(cuid())
  title          String
  description    String?
  type           ContentType
  fileUrl        String?
  fileName       String?
  fileSize       Int?
  mimeType       String?
  contentData    Json        @default("{}")
  version        String?
  checksum       String?
  order          Int         @default(0)
  isPublished    Boolean     @default(false)
  isDownloadable Boolean     @default(true)
  requiresAuth   Boolean     @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId  String?
  course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lectureId String?  @unique
  lecture   Lecture? @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@map("content_items")
}

model Enrollment {
  id               String           @id @default(cuid())
  enrolledAt       DateTime         @default(now())
  completedAt      DateTime?
  status           EnrollmentStatus @default(ACTIVE)
  progress         Float            @default(0)
  currentLectureId String?

  enrollmentSource  EnrollmentSource @default(DIRECT)
  completedLectures Int              @default(0)
  totalLectures     Int              @default(0)

  paymentStatus   PaymentStatus @default(FREE)
  paymentId       String?
  amountPaid      Float?
  discountApplied Float?        @default(0)

  totalTimeSpent Int       @default(0)
  streakDays     Int       @default(0)
  lastAccessedAt DateTime?

  certificateEarned   Boolean   @default(false)
  certificateEarnedAt DateTime?

  type                 EnrollmentType   @default(FREE)
  source               EnrollmentSource @default(DIRECT)
  amount               Float            @default(0)
  currency             String           @default("USD")
  paidAt               DateTime?
  expiresAt            DateTime?
  notes                String?
  completionPercentage Float            @default(0)

  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId        String
  course          Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  paymentSessions PaymentSession[]

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Progress {
  id        String  @id @default(cuid())
  userId    String
  courseId  String
  lectureId String?
  sectionId String?

  progress  Float   @default(0)
  completed Boolean @default(false)
  watchTime Int     @default(0)
  timeSpent Int     @default(0)

  lastWatchedAt DateTime?
  completedAt   DateTime?
  streakDays    Int       @default(0)

  interactions      Json    @default("{}")
  difficultyRating  Float?
  aiRecommendations String?

  certificateEarned   Boolean   @default(false)
  certificateIssuedAt DateTime?

  currentLessonId String?
  currentTime     Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lecture Lecture? @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, lectureId])
  @@map("progress")
}

model Review {
  id           String  @id @default(cuid())
  rating       Int     @default(1)
  comment      String?
  isVerified   Boolean @default(false)
  helpfulCount Int     @default(0)

  courseQuality    Int?
  instructorRating Int?
  difficultyRating Int?
  valueForMoney    Int?

  status       ReviewStatus @default(PUBLISHED)
  flaggedCount Int          @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("reviews")
}

model Quiz {
  id           String  @id @default(cuid())
  title        String
  description  String?
  instructions String?

  timeLimit    Int?
  attempts     Int     @default(1)
  passingScore Float   @default(70)
  showResults  Boolean @default(true)
  randomize    Boolean @default(false)

  isPublished Boolean @default(false)
  order       Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId     String
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions    QuizQuestion[]
  quizAttempts QuizAttempt[]  @relation("QuizAttempts")

  @@map("quizzes")
}

model QuizQuestion {
  id            String       @id @default(cuid())
  question      String
  type          QuestionType
  options       Json         @default("[]")
  correctAnswer Json         @default("{}")
  explanation   String?
  points        Float        @default(1)
  order         Int          @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_questions")
}

model QuizAttempt {
  id          String  @id @default(cuid())
  score       Float   @default(0)
  totalPoints Float   @default(0)
  percentage  Float   @default(0)
  passed      Boolean @default(false)
  timeSpent   Int     @default(0)
  answers     Json    @default("{}")

  startedAt   DateTime  @default(now())
  completedAt DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId String
  quiz   Quiz   @relation("QuizAttempts", fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model Assignment {
  id           String  @id @default(cuid())
  title        String
  description  String
  instructions String?

  dueDate             DateTime?
  points              Float          @default(100)
  submissionType      AssignmentType @default(TEXT)
  allowLateSubmission Boolean        @default(false)
  maxFileSize         Int?

  isPublished Boolean @default(false)
  order       Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId    String
  course      Course                 @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions AssignmentSubmission[]

  @@map("assignments")
}

model AssignmentSubmission {
  id       String           @id @default(cuid())
  content  String?
  fileUrls String[]         @default([])
  status   SubmissionStatus @default(DRAFT)

  grade    Float?
  feedback String?
  gradedBy String?
  gradedAt DateTime?

  submittedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@map("assignment_submissions")
}

model LectureNote {
  id        String  @id @default(cuid())
  content   String
  timestamp Int?
  isPrivate Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lectureId String
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@map("lecture_notes")
}

model Certificate {
  id            String    @id @default(cuid())
  certificateId String    @unique
  templateUrl   String
  issueDate     DateTime  @default(now())
  expiryDate    DateTime?
  isVerified    Boolean   @default(true)

  completionScore Float?
  completionTime  Int
  grade           String?

  verificationCode String  @unique
  isPublic         Boolean @default(false)

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("certificates")
}

model Discussion {
  id         String         @id @default(cuid())
  title      String?
  content    String
  type       DiscussionType @default(QUESTION)
  isResolved Boolean        @default(false)
  isPinned   Boolean        @default(false)
  upvotes    Int            @default(0)
  downvotes  Int            @default(0)

  tags        String[] @default([])
  isAnonymous Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String?
  course    Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lectureId String?
  lecture   Lecture?     @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Discussion?  @relation("DiscussionReplies", fields: [parentId], references: [id])
  replies   Discussion[] @relation("DiscussionReplies")

  @@map("discussions")
}

model Notification {
  id      String           @id @default(cuid())
  title   String
  message String
  type    NotificationType
  isRead  Boolean          @default(false)
  data    Json             @default("{}")

  priority  NotificationPriority @default(NORMAL)
  actionUrl String?

  createdAt DateTime  @default(now())
  expiresAt DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model CourseBookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_bookmarks")
}

model LearningPath {
  id          String      @id @default(cuid())
  title       String
  description String
  category    String
  level       CourseLevel

  estimatedDuration Int @default(0)
  totalCourses      Int @default(0)

  isPublished Boolean @default(false)
  isFeatured  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses CourseLearningPath[]
  users   UserLearningPath[]

  @@map("learning_paths")
}

model CourseLearningPath {
  id         String  @id @default(cuid())
  order      Int     @default(0)
  isRequired Boolean @default(true)

  pathId   String
  path     LearningPath @relation(fields: [pathId], references: [id], onDelete: Cascade)
  courseId String
  course   Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([pathId, courseId])
  @@map("course_learning_paths")
}

model UserLearningPath {
  id          String    @id @default(cuid())
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  progress    Float     @default(0)

  userId String
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pathId String
  path   LearningPath @relation(fields: [pathId], references: [id], onDelete: Cascade)

  @@unique([userId, pathId])
  @@map("user_learning_paths")
}

model CourseAnnouncement {
  id       String               @id @default(cuid())
  title    String
  content  String
  priority AnnouncementPriority @default(NORMAL)

  publishAt DateTime  @default(now())
  expiresAt DateTime?

  sendEmail Boolean @default(false)
  sendPush  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_announcements")
}



model LectureResource {
  id             String    @id @default(cuid())
  name           String
  url            String
  type           String
  description    String?
  fileSize       Int?
  mimeType       String?
  isDownloadable Boolean   @default(true)
  requiresAuth   Boolean   @default(false)
  downloadCount  Int       @default(0)
  expiresAt      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lectureId String
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@map("lecture_resources")
}

model LectureRating {
  id           String  @id @default(cuid())
  rating       Int     @default(1)
  feedback     String?
  isHelpful    Boolean @default(false)
  helpfulCount Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lectureId String
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@unique([userId, lectureId])
  @@map("lecture_ratings")
}

model LectureIssue {
  id          String    @id @default(cuid())
  issueType   String
  description String
  status      String    @default("PENDING")
  priority    String    @default("NORMAL")
  assignedTo  String?
  resolution  String?
  resolvedAt  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lectureId String
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@map("lecture_issues")
}

model LectureAccessRequest {
  id         String    @id @default(cuid())
  reason     String?
  status     String    @default("PENDING")
  approvedBy String?
  approvedAt DateTime?
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lectureId String
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@map("lecture_access_requests")
}

model LectureTranscript {
  id         String    @id @default(cuid())
  content    String
  language   String    @default("en")
  timestamps Json      @default("{}")
  accuracy   Float     @default(0.0)
  isVerified Boolean   @default(false)
  verifiedBy String?
  verifiedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lectureId String
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@map("lecture_transcripts")
}

model LectureSummary {
  id                   String   @id @default(cuid())
  content              String
  keyPoints            String[] @default([])
  difficulty           Float    @default(1.0)
  estimatedReadingTime Int      @default(0)
  isAI                 Boolean  @default(true)
  generatedBy          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lectureId String
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@map("lecture_summaries")
}

model LectureAnalytics {
  id        String  @id @default(cuid())
  lectureId String  @unique
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  totalViews       Int   @default(0)
  uniqueViews      Int   @default(0)
  averageWatchTime Float @default(0)
  completionRate   Float @default(0)
  engagementRate   Float @default(0)

  dropOffPoints Json @default("[]")

  popularSegments Json @default("[]")

  userInteractions Json @default("[]")

  heatmapData Json @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lecture_analytics")
}

model CourseAnalytics {
  id       String @id @default(cuid())
  courseId String @unique
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  totalEnrollments     Int   @default(0)
  activeEnrollments    Int   @default(0)
  completedEnrollments Int   @default(0)
  completionRate       Float @default(0)
  averageProgress      Float @default(0)

  totalRevenue                Float  @default(0)
  currency                    String @default("USD")
  averageRevenuePerEnrollment Float  @default(0)

  totalDiscussions Int   @default(0)
  totalReviews     Int   @default(0)
  averageTimeSpent Float @default(0)
  retentionRate    Float @default(0)

  monthlyEnrollments Json @default("{}")
  monthlyRevenue     Json @default("{}")

  topPerformingLectures   Json     @default("[]")
  strugglingStudents      Int      @default(0)
  recommendedImprovements String[] @default([])
  contentGaps             String[] @default([])

  categoryAverage   Float @default(0)
  industryBenchmark Float @default(0)
  previousPeriod    Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("course_analytics")
}

// =============================================================================
// PAYMENT SYSTEM
// =============================================================================

model PaymentSession {
  id              String               @id @default(cuid())
  courseId        String
  userId          String
  status          PaymentSessionStatus @default(PENDING)
  amount          Int
  currency        String               @default("USD")
  paymentIntentId String?              @unique
  enrollmentId    String?
  metadata        Json                 @default("{}")

  stripeSessionId  String? @unique
  stripeCustomerId String?

  couponCode     String?
  discountAmount Int     @default(0)
  finalAmount    Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?

  course     Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollment Enrollment? @relation(fields: [enrollmentId], references: [id], onDelete: SetNull)

  @@index([userId, courseId])
  @@index([paymentIntentId])
  @@index([status])
  @@map("payment_sessions")
}

model PaymentMethod {
  id                    String  @id @default(cuid())
  userId                String
  stripePaymentMethodId String  @unique
  type                  String
  cardBrand             String?
  cardLast4             String?
  cardExpMonth          Int?
  cardExpYear           Int?
  billingDetails        Json    @default("{}")
  isDefault             Boolean @default(false)

  metadata Json @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stripePaymentMethodId])
  @@map("payment_methods")
}

model Coupon {
  id            String       @id @default(cuid())
  code          String       @unique
  name          String
  description   String?
  discountType  DiscountType @default(PERCENTAGE)
  discountValue Float
  currency      String       @default("USD")
  maxUses       Int?
  currentUses   Int          @default(0)
  isActive      Boolean      @default(true)

  validFrom  DateTime?
  validUntil DateTime?

  minimumAmount     Int?
  maximumDiscount   Int?
  applicableCourses String[] @default([])

  metadata Json @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
  @@index([isActive])
  @@map("coupons")
}

// =============================================================================
// INSTRUCTOR VERIFICATION SYSTEM
// =============================================================================

model InstructorApplication {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  applicationData Json @default("{}")

  personalInfo Json @default("{}")

  professionalBackground Json @default("{}")

  teachingInformation Json @default("{}")

  documents Json @default("{}")

  consents Json @default("{}")

  fullName           String
  phoneNumber        String
  nationality        String?
  currentJobTitle    String?
  yearsOfExperience  Int
  subjectsToTeach    String[] @default([])
  teachingMotivation String

  resumeUrl         String?
  portfolioUrl      String?
  identityDocument  Json?   @default("{}")
  educationCerts    Json    @default("[]")
  professionalCerts Json    @default("[]")
  sampleContent     Json    @default("{}")

  currentStep     Int               @default(0)
  completionScore Int               @default(0)
  status          ApplicationStatus @default(DRAFT)
  submittedAt     DateTime?
  lastAutoSave    DateTime?
  lastSavedAt     DateTime?         @updatedAt

  aiVerification       InstructorAIVerification?
  manualReview         InstructorManualReview?
  interview            InstructorInterview?
  documentLogs         DocumentVerificationLog[]
  applicationDocuments ApplicationDocument[]     @relation("ApplicationDocuments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("instructor_applications")
}

model InstructorAIVerification {
  id            String                @id @default(cuid())
  applicationId String                @unique
  application   InstructorApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  identityVerified   Boolean  @default(false)
  identityConfidence Float?
  identityFlags      String[] @default([])

  educationVerified   Boolean  @default(false)
  educationConfidence Float?
  educationFlags      String[] @default([])

  experienceVerified   Boolean  @default(false)
  experienceConfidence Float?
  experienceFlags      String[] @default([])

  contentQualityScore  Float?
  languageProficiency  Float?
  professionalismScore Float?

  riskScore       Float?
  riskFactors     String[] @default([])
  fraudIndicators String[] @default([])

  overallScore         Float?
  recommendation       AIRecommendation
  recommendationReason String?

  verificationProvider String?
  processingTime       Int?
  processingCost       Float?

  processedAt DateTime @default(now())

  @@map("instructor_ai_verifications")
}

model InstructorManualReview {
  id            String                @id @default(cuid())
  applicationId String                @unique
  application   InstructorApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  reviewerId String
  reviewer   User   @relation("ReviewerReviews", fields: [reviewerId], references: [id])

  documentationScore   Int?
  experienceScore      Int?
  communicationScore   Int?
  technicalScore       Int?
  professionalismScore Int?
  overallScore         Float?

  strengths       String?
  weaknesses      String?
  concerns        String?
  recommendations String?

  decision                ReviewDecision
  decisionReason          String?
  conditionalRequirements String[]       @default([])

  requiresInterview      Boolean  @default(false)
  requiresAdditionalDocs Boolean  @default(false)
  requiredDocuments      String[] @default([])

  reviewedAt DateTime @default(now())

  @@map("instructor_manual_reviews")
}

model InstructorInterview {
  id            String                @id @default(cuid())
  applicationId String                @unique
  application   InstructorApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  interviewerId   String
  interviewer     User      @relation("InterviewerInterviews", fields: [interviewerId], references: [id])
  scheduledAt     DateTime
  actualStartTime DateTime?
  actualEndTime   DateTime?

  format         InterviewFormat @default(VIDEO_CALL)
  meetingLink    String?
  interviewNotes String?

  communicationScore    Int?
  technicalKnowledge    Int?
  teachingDemonstration Int?
  culturalFit           Int?
  overallScore          Float?

  passed    Boolean?
  feedback  String?
  nextSteps String?

  recordingUrl     String?
  recordingConsent Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("instructor_interviews")
}

model DocumentVerificationLog {
  id            String                @id @default(cuid())
  applicationId String
  application   InstructorApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  documentType         String
  documentUrl          String
  verificationProvider String
  verificationResult   Json   @default("{}")

  isVerified Boolean  @default(false)
  confidence Float?
  flags      String[] @default([])
  notes      String?

  verifiedBy String?
  verifier   User?    @relation(fields: [verifiedBy], references: [id])
  verifiedAt DateTime @default(now())

  @@map("document_verification_logs")
}

model ApplicationDocument {
  id            String                @id @default(cuid())
  applicationId String
  application   InstructorApplication @relation("ApplicationDocuments", fields: [applicationId], references: [id], onDelete: Cascade)

  documentType DocumentType
  fileName     String
  originalName String
  fileSize     Int
  mimeType     String
  fileUrl      String
  thumbnailUrl String?

  verificationStatus VerificationStatus @default(DRAFT)
  uploadedAt         DateTime           @default(now())

  aiAnalysis Json @default("{}")

  metadata Json @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("application_documents")
}

model AIInteraction {
  id        String   @id @default(cuid())
  userId    String
  courseId  String?
  type      String   // 'suggestion', 'analysis', 'chat', 'generation'
  request   Json
  response  Json
  tokens    Int?
  createdAt DateTime @default(now())
  
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([courseId])
  @@map("ai_interactions")
}

model AICacheEntry {
  id         String   @id @default(cuid())
  cacheKey   String   @unique
  response   Json
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  
  @@index([expiresAt])
  @@map("ai_cache_entries")
}




// =============================================================================
// ENUMS - COMPLETE DEFINITION
// =============================================================================

// User & Profile Enums
enum UserRole {
  VISITOR
  STUDENT
  INSTRUCTOR
  ADMIN
  SUPER_ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum LearningStyle {
  VISUAL
  AUDITORY
  READING_WRITING
  KINESTHETIC
  MULTIMODAL
}

enum InstructorStatus {
  NOT_APPLIED
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  SUSPENDED
  PROBATION
}

enum StudentLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum AdminLevel {
  MODERATOR
  ADMIN
  SUPER_ADMIN
  SYSTEM_ADMIN
}

// Live Sessions Enums
enum LiveSessionType {
  COURSE_BASED // Session covers specific course content
  CUSTOM // Flexible session with custom topic
}

enum SessionType {
  INDIVIDUAL // 1-on-1 session
  SMALL_GROUP // 2-5 participants
  LARGE_GROUP // 6-15 participants  
  WORKSHOP // 16+ participants, structured format
  MASTERCLASS // 30+ participants, lecture-style
}

enum SessionFormat {
  ONLINE // Virtual session
  OFFLINE // In-person session
  HYBRID // Mixed online/offline
}

enum SessionMode {
  LIVE // Real-time session
  RECORDED // Pre-recorded content
  BLENDED // Mix of live and recorded
}

enum SessionStatus {
  SCHEDULED // Session is scheduled but not started
  CONFIRMED // Enough participants confirmed
  IN_PROGRESS // Session is currently running
  COMPLETED // Session finished successfully
  CANCELLED // Session was cancelled
  NO_SHOW // No participants showed up
  RESCHEDULED // Session was moved to different time
}

enum BookingMode {
  REQUEST // Student requests, instructor approves
  DIRECT // Student books available slot directly
}

enum BookingStatus {
  PENDING // Waiting for confirmation/payment
  ACCEPTED // Booking confirmed by instructor
  REJECTED // Booking rejected by instructor
  EXPIRED // Booking request expired
  CANCELLED // Cancelled by learner or instructor
  COMPLETED // Session completed
}

enum ReservationStatus {
  PENDING // Waiting for confirmation/payment
  CONFIRMED // Reservation confirmed
  CANCELLED // Cancelled by learner or instructor
  COMPLETED // Session completed
  NO_SHOW // Learner didn't attend
}

enum CancellationPolicy {
  FLEXIBLE // Full refund 24h+, 50% refund 12h+
  MODERATE // Full refund 48h+, 50% refund 24h+
  STRICT // Full refund 72h+, 25% refund 48h+
}

enum SessionTopicType {
  FIXED // Predefined topic
  FLEXIBLE // Custom topic requests allowed
  HYBRID // Mix of fixed and flexible
}

enum TopicDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ParticipantRole {
  STUDENT
  INSTRUCTOR
  ASSISTANT
  OBSERVER
}

enum ParticipantStatus {
  ENROLLED
  ATTENDED
  NO_SHOW
  CANCELLED
  REFUNDED
}

enum AttendanceStatus {
  NOT_ATTENDED // Default state
  PRESENT // Attended full session
  ABSENT // Didn't attend despite reservation
  LATE // Joined late
  LEFT_EARLY // Left before session ended
  PARTIAL // Partial attendance
}

enum DeviceType {
  DESKTOP
  MOBILE
  TABLET
}

enum ReviewType {
  SESSION // Review of specific session
  INSTRUCTOR // Review of instructor overall
}

// Payment Enums
enum PaymentStatus {
  PENDING // Payment not yet made
  PAID // Payment completed
  FAILED // Payment failed
  REFUNDED // Payment refunded
  FREE // No payment required
  PARTIAL_REFUND // Partial refund processed
  CANCELED // Payment cancelled
  EXPIRED // Payment expired
}

enum PaymentTiming {
  BEFORE_SESSION // Payment required before session starts
  AFTER_SESSION // Payment after session completion
  ON_COMPLETION // Payment only if session completed successfully
}

enum PaymentSessionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELED
  EXPIRED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  CANCELLED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// Notification Enums
enum NotificationType {
  // Course-related
  COURSE_UPDATE
  NEW_LECTURE
  ASSIGNMENT_DUE
  CERTIFICATE_EARNED
  DISCUSSION_REPLY
  INSTRUCTOR_APPROVED
  SYSTEM_ANNOUNCEMENT
  AI_RECOMMENDATION
  ENROLLMENT_CONFIRMATION
  PAYMENT_CONFIRMATION

  // Live Sessions
  BOOKING_RECEIVED
  BOOKING_ACCEPTED
  BOOKING_REJECTED
  SESSION_REMINDER
  SESSION_STARTING
  SESSION_COMPLETED
  PAYMENT_RECEIVED
  PAYOUT_PROCESSED
  TOPIC_APPROVAL_NEEDED
  SCHEDULE_CONFLICT
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum DeliveryStatus {
  QUEUED
  SENT
  FAILED
  RETRYING
}

// Course System Enums
enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
  ALL_LEVELS
}

enum CourseIntensity {
  LIGHT
  REGULAR
  INTENSIVE
  BOOTCAMP
}

enum CourseStatus {
  DRAFT
  UNDER_REVIEW
  PUBLISHED
  ARCHIVED
  SUSPENDED
  COMING_SOON
}

enum EnrollmentType {
  FREE
  PAID
  SUBSCRIPTION
  INVITATION_ONLY
  WAITLIST
}

enum EnrollmentSource {
  DIRECT
  REFERRAL
  PROMOTION
  BUNDLE
  LEARNING_PATH
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  SUSPENDED
  REFUNDED
  EXPIRED
}

enum LectureType {
  VIDEO
  TEXT
  AUDIO
  QUIZ
  IMAGE
  DOCUMENT
  RESOURCE
  ASSIGNMENT
}

enum VideoProvider {
  YOUTUBE
  VIMEO
  WISTIA
  SELF_HOSTED
  AWS_S3
  CLOUDINARY
}

enum ContentType {
  VIDEO
  AUDIO
  DOCUMENT
  TEXT
  QUIZ
  ASSIGNMENT
  RESOURCE
  IMAGE
  ARCHIVE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
  FILL_IN_BLANK
  ESSAY
  MATCHING
  ORDERING
  NUMERIC
}

enum AssignmentType {
  TEXT
  FILE_UPLOAD
  URL_SUBMISSION
  PEER_REVIEW
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  GRADED
  RETURNED
  LATE
}

enum ReviewStatus {
  PUBLISHED
  PENDING
  FLAGGED
  HIDDEN
}

enum DiscussionType {
  QUESTION
  ANSWER
  ANNOUNCEMENT
  GENERAL
  BUG_REPORT
  FEATURE_REQUEST
}

enum AIInteractionType {
  QUESTION
  EXPLANATION
  QUIZ_GENERATION
  SUMMARY
  RECOMMENDATION
  TUTORING
  CODE_REVIEW
  CONTENT_ANALYSIS
}

enum AnnouncementPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// Application & Verification Enums
enum ApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  REQUIRES_MORE_INFO
  INTERVIEW_SCHEDULED
}

enum VerificationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  WITHDRAWN
}

enum DocumentType {
  IDENTITY_DOCUMENT
  EDUCATION_CERTIFICATE
  PROFESSIONAL_CERTIFICATE
  EMPLOYMENT_VERIFICATION
  PROFILE_PHOTO
  VIDEO_INTRODUCTION
  TEACHING_DEMO
  RESUME
  PORTFOLIO
  OTHER
}

enum DraftType {
  COURSE
  APPLICATION
  PROFILE
  CONTENT
}

enum AIRecommendation {
  APPROVE
  REJECT
  MANUAL_REVIEW_REQUIRED
  INTERVIEW_REQUIRED
  MORE_DOCUMENTS_NEEDED
}

enum ReviewDecision {
  APPROVE
  REJECT
  CONDITIONAL_APPROVE
  REQUEST_INTERVIEW
  REQUEST_MORE_INFO
}

enum InterviewFormat {
  VIDEO_CALL
  PHONE_CALL
  IN_PERSON
  ASYNCHRONOUS_VIDEO
}

// =============================================================================
// INSTRUCTOR RATING SYSTEM
// =============================================================================

model InstructorRating {
  id           String  @id @default(cuid())
  instructorId String
  instructor   User    @relation("InstructorRatings", fields: [instructorId], references: [id], onDelete: Cascade)
  studentId    String
  student      User    @relation("StudentRatings", fields: [studentId], references: [id], onDelete: Cascade)

  // Simple rating details
  rating       Float   // 1.0 to 5.0 stars
  comment      String?

  // Metadata
  isVerified   Boolean @default(false)
  isPublic     Boolean @default(true)
  helpfulVotes Int     @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([instructorId, studentId])
  @@map("instructor_ratings")
}
